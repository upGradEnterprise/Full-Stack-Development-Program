DESIGN PRINCIPLES & PATTERNS

Good Design:
* Code Reuse: Loosely Coupled
* Extensibility: "Change is the only Constant"

Design Principle:
What is a Good Software Design?
* Encapsulate What Varies
	* Encapsulation on a method Level: getters() & setters()
	* Encapsulation on a class level: constructors

Order
- orderId
- country
- state
- city
....
orderId should not have a setter, can have a getter
rest can have getter & setter

Order				---->			TaxCalulator
- orderId						....
- productId						+ getTaxRate(country, state, productid)
- tax							- getGST(state)
- country						- getCST(state)
- state
- city
...

What's a Design Pattern?
Commonly Occurring Problems in Software Design?
* SOLID
* Not Well-Structured
* Too many Inter-Dependencies
* Thread Optimization
* Scalable Design
* Functional & Non-Functional Requirements
* Non-Waterfall Model [Agile]
* Exception Handling
* Redundancy

The pattern is not a specific piece of code, but a general concept for solving a particular problem.
Don't confuse pattern with algorithm.

What does the pattern consist of?
* Invent: Identifying the problem & the solution
* Motivation: Approach of the problem 
* Structure: Classes that shows the pattern & how it is related
* Code: Implementation of the pattern. Depends on Programming Language

Classification of Patterns:
* Creational: increases the flexibility & reuse of the code
* Structural: how to assemble objects & classes into structure, keeping it flexible & efficient
* Behavioural: effective communication & assignment of responsibilities between objects

Creational:
* Factory: 
	** 	used when we have a superclass with multiple sub-classes and based on input, 
		we need to return one of the sub-class
	** 	takes out the responsibility of the instantiation of a class from the 
		client program to the factory class
* Abstract:
	** 	we get rid of if-else block and have a factory class for each sub-class
	** 	factory class will then return the sub-class based on the input factory class
	** 	"factory of factories"
	Exercise: GSMArena

Phone nokia150Music = BrandFactory.getBrand(PhoneFactory.getPhone(BasicPhoneFactory.getBasicPhone(new BasicPhone(, , , , ,))));

Phone nokiaAsha501 = BrandFactory.getBrand(PhoneFactory.getPhone(IntermediatePhoneFactory.getIntermediatePhone(
											   new IntermediatePhone(, , , , ,))));
Factory vs AbstractFactory
* 	Factory pattern is simpler and more flexible for creating a single type of object, 
	Abstract Factory is more robust and consistent when dealing with multiple related product types

Which to use?
* Factory Pattern: When you need to create a single type of object and maintain flexibility for adding new types. 
* Abstract Factory Pattern: When you need to create families of related objects and ensure consistent and compatible products. 	

* Builder:
Problems with Factory & AbstractFactory:
1. Too Many arguments
2. Some of the parameters might be optional, we need to pass NULL
3. Object creation is complex if the class has lot of members

Builder vs Factory
* 	Factory pattern is best suited for simple objects with a single, well-defined construction process
* 	Builder pattern is best when you need to construct complex objects with optional parts or variations, 
	providing more flexibility and control over the creation steps

Which to use?
* Builder: 	When you need to build complex objects with many optional parameters, 
		offering flexibility in the construction process

* Factory: 	When you need to abstract the object creation logic, provide a common interface, and 
		simplify the creation of different object types


Prototype
when the Object creation is a Costly affair, requires lot of resources

Singleton