Key Aspects of Debugging:
* Identifying the Problem
* Locating the Source
* Understanding the Cause
* Implementing a Solution
* Testing the Solution

Why is Debugging Important?
* Ensuring Correctness
* Improving Reliability / Trustability
* Reducing Cost
* Enhancing UX [User eXperience]
* Maintaining Security

Real-World Examples
* Medical Device Software
* Financial Trading System
* Banking System
* Automotive Software

Debugging Strategies:
* Understanding the Problem
* Reproduce the Problem
* Isolate the Problem
* Use Debugging Tools
* Test your Fix

Debugging vs Testing:
Purpose
Scope
Timing
Process
Outcome
Tools
Level
Automation

Exercise 1: Write JUnit tests for a method that checks if a given string is a palindrome. Consider different cases like empty strings, strings with spaces, and strings with mixed-case letters.

Exercise 2: Write a method that calculates the average of an array of numbers. Write JUnit tests to cover different scenarios (empty array, array with positive numbers, array with negative numbers, array with mixed numbers).

Errors:
* Syntax Errors
* Runtime Errors - Exceptions
* Logic Errors

Logging:
1. Log4j
	Key Features:
	* Appenders: Supports writing logs to various destinations - files, consoles, databases, network
	* Layouts: Formatting of log messages - timestamps, log levels
	* Configuration: XML, properties file, program

2. SLF4j
	Key Features:
	* Flexibility: Allows switching between different logging
	* Performance: Lightweight & Efficient
	* Bridging: Redirect logs from other logging frameworks

3. JUL [java.util.logging]
	Key Features:
	* Built-in: Part of JDK, no need for external libraries / dependencies
	* Handlers: same as Appenders in Log4j
	* Configuration: properties file, program

Logging Levels:
* TRACE: most detail logging level
	* e.g. Logging every method's entry & exit
* DEBUG: used for detailed information, provides more information than INFO but less than TRACE
	* e.g. Logging the state of an object
* INFO: used for general information about the application or the completion of a task
	* e.g. startup & shutdown of the application
* WARN: used to indicate potential problems or unexpected situations that causes application to fail
	* e.g. logging a deprecated API or slow response from an external service
* ERROR: used to indicate errors that prevent the application from performing a specific task
	* e.g. failed validation check
* FATAL: used for critical errors that cause application crash
	* e.g. logging a unrecoverable exception that causes the application to terminate

Clarity in Logging [Best Practices]:
* Writing Understandable Messages / Descriptive Language
* Be Consistent
* Avoid Technical Jargon
* Specify the "What" and "Why"

Breakpoints
* Line Breakpoints: pause execution when a specific line of code is reached
* Method Breakpoints: pause execution when a specific method is entered
* Field Breakpoints: pause execution when a specific field (variable) is accessed or modified
* Exception Breakpoints: pause execution when a specific exception is thrown

VisualVM: Monitoring Java Applications
